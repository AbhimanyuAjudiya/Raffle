{"id":"46b3a6e9b5f883f024d51c1ed3dc724a","_format":"hh-sol-build-info-1","solcVersion":"0.8.7","solcLongVersion":"0.8.7+commit.e28d00a7","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"},"contracts/Raffle.sol":{"content":"// SPDX-License-identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\n\nerror Ruffle__NotEnoughETHEntered();\n\ncontract Ruffle is VRFConsumerBaseV2{\n    uint256 private immutable i_entranceFee;\n    address payable[] private s_players;\n\n    // Events \n    event RaffelEnter(address indexed player);\n\n    constructor (address vrfCoordinatorV2,uint256 entranceFee) VRFConsumerBaseV2(vrfCoordinatorV2){\n        i_entranceFee = entranceFee;\n    }\n\n    function enterRaffle() public payable {\n        if(msg.value < i_entranceFee){\n            revert Ruffle__NotEnoughETHEntered();\n        }\n        s_players.push(payable(msg.sender));\n        emit RaffelEnter(msg.sender);\n    }\n\n    function requestRandomWinner() external {  \n        //req random num\n        // once we get it do something with it \n        // we will do 2 transaction process coze if we did it with in 1 tracsaction then some one can try to do the same and can manipulate the raffle and win...\n        \n    }\n\n    function fulfillRandomWords(uint256 requestId,  uint256[] memory randomWords) internal override {}\n    function getEntranceFee() public view returns (uint256) {\n        return i_entranceFee;\n    }\n}\n\n//contract \n\n//state variables\n\n//declar a private and immutable var entranceFee which will be immutable var so use i_\n//make address type payable[] private variable which will be storage variable\n\n//constractor which will take entranceFee as argument and initealize the main entranceFee var\n\n//declare ruffle function which will be public and payable where \n// 1st check enough entrance fee is entered or not if not then throw revert Raffle__NotEnoughETHEntered() and declare it out side the contract\n\n//declare function getentrancefee public view returns entrancefee"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/Raffle.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/Raffle.sol","start":-1},"type":"Warning"}],"sources":{"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","exportedSymbols":{"VRFConsumerBaseV2":[57]},"id":58,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"57:5275:0","text":"****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness. It ensures 2 things:\n @dev 1. The fulfillment came from the VRFCoordinator\n @dev 2. The consumer contract implements fulfillRandomWords.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash). Create subscription, fund it\n @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n @dev subscription management functions).\n @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n @dev callbackGasLimit, numWords),\n @dev see (VRFCoordinatorInterface for a description of the arguments).\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomWords method.\n @dev The randomness argument to fulfillRandomWords is a set of random words\n @dev generated from your requestId and the blockHash of the request.\n @dev If your contract could have concurrent requests open, you can use the\n @dev requestId returned from requestRandomWords to track which response is associated\n @dev with which randomness request.\n @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ.\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request. It is for this reason that\n @dev that you can signal to an oracle you'd like them to wait longer before\n @dev responding to the request (however this is not enforced in the contract\n @dev and so remains effective only in the case of unmodified oracle software)."},"fullyImplemented":false,"id":57,"linearizedBaseContracts":[57],"name":"VRFConsumerBaseV2","nameLocation":"5351:17:0","nodeType":"ContractDefinition","nodes":[{"id":8,"name":"OnlyCoordinatorCanFulfill","nameLocation":"5379:25:0","nodeType":"ErrorDefinition","parameters":{"id":7,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4,"mutability":"mutable","name":"have","nameLocation":"5413:4:0","nodeType":"VariableDeclaration","scope":8,"src":"5405:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3,"name":"address","nodeType":"ElementaryTypeName","src":"5405:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6,"mutability":"mutable","name":"want","nameLocation":"5427:4:0","nodeType":"VariableDeclaration","scope":8,"src":"5419:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5,"name":"address","nodeType":"ElementaryTypeName","src":"5419:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5404:28:0"},"src":"5373:60:0"},{"constant":false,"id":10,"mutability":"immutable","name":"vrfCoordinator","nameLocation":"5546:14:0","nodeType":"VariableDeclaration","scope":57,"src":"5520:40:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"5520:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":20,"nodeType":"Block","src":"5677:43:0","statements":[{"expression":{"id":18,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":16,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"5683:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":17,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"5700:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5683:32:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":19,"nodeType":"ExpressionStatement","src":"5683:32:0"}]},"documentation":{"id":11,"nodeType":"StructuredDocumentation","src":"5565:72:0","text":" @param _vrfCoordinator address of VRFCoordinator contract"},"id":21,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":14,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"5660:15:0","nodeType":"VariableDeclaration","scope":21,"src":"5652:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12,"name":"address","nodeType":"ElementaryTypeName","src":"5652:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5651:25:0"},"returnParameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"5677:0:0"},"scope":57,"src":"5640:80:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"documentation":{"id":22,"nodeType":"StructuredDocumentation","src":"5724:686:0","text":" @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomWords the VRF output expanded to the requested number of words"},"id":30,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"6514:18:0","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":24,"mutability":"mutable","name":"requestId","nameLocation":"6541:9:0","nodeType":"VariableDeclaration","scope":30,"src":"6533:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":23,"name":"uint256","nodeType":"ElementaryTypeName","src":"6533:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":27,"mutability":"mutable","name":"randomWords","nameLocation":"6569:11:0","nodeType":"VariableDeclaration","scope":30,"src":"6552:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":25,"name":"uint256","nodeType":"ElementaryTypeName","src":"6552:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":26,"nodeType":"ArrayTypeName","src":"6552:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6532:49:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"6598:0:0"},"scope":57,"src":"6505:94:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":55,"nodeType":"Block","src":"6883:167:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":38,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6893:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":39,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6893:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":40,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"6907:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6893:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":49,"nodeType":"IfStatement","src":"6889:109:0","trueBody":{"id":48,"nodeType":"Block","src":"6923:75:0","statements":[{"errorCall":{"arguments":[{"expression":{"id":43,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6964:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":44,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6964:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":45,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"6976:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":42,"name":"OnlyCoordinatorCanFulfill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"6938:25:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6938:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":47,"nodeType":"RevertStatement","src":"6931:60:0"}]}},{"expression":{"arguments":[{"id":51,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"7022:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":52,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"7033:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":50,"name":"fulfillRandomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"7003:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,uint256[] memory)"}},"id":53,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7003:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":54,"nodeType":"ExpressionStatement","src":"7003:42:0"}]},"functionSelector":"1fe543e3","id":56,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomWords","nameLocation":"6803:21:0","nodeType":"FunctionDefinition","parameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"requestId","nameLocation":"6833:9:0","nodeType":"VariableDeclaration","scope":56,"src":"6825:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":31,"name":"uint256","nodeType":"ElementaryTypeName","src":"6825:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":35,"mutability":"mutable","name":"randomWords","nameLocation":"6861:11:0","nodeType":"VariableDeclaration","scope":56,"src":"6844:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":33,"name":"uint256","nodeType":"ElementaryTypeName","src":"6844:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":34,"nodeType":"ArrayTypeName","src":"6844:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6824:49:0"},"returnParameters":{"id":37,"nodeType":"ParameterList","parameters":[],"src":"6883:0:0"},"scope":57,"src":"6794:256:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":58,"src":"5333:1719:0","usedErrors":[8]}],"src":"32:7021:0"},"id":0},"contracts/Raffle.sol":{"ast":{"absolutePath":"contracts/Raffle.sol","exportedSymbols":{"Ruffle":[139],"Ruffle__NotEnoughETHEntered":[62],"VRFConsumerBaseV2":[57]},"id":140,"nodeType":"SourceUnit","nodes":[{"id":59,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"32:23:1"},{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","file":"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","id":60,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":140,"sourceUnit":58,"src":"57:65:1","symbolAliases":[],"unitAlias":""},{"id":62,"name":"Ruffle__NotEnoughETHEntered","nameLocation":"130:27:1","nodeType":"ErrorDefinition","parameters":{"id":61,"nodeType":"ParameterList","parameters":[],"src":"157:2:1"},"src":"124:36:1"},{"abstract":false,"baseContracts":[{"baseName":{"id":63,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":57,"src":"181:17:1"},"id":64,"nodeType":"InheritanceSpecifier","src":"181:17:1"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":139,"linearizedBaseContracts":[139,57],"name":"Ruffle","nameLocation":"171:6:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":66,"mutability":"immutable","name":"i_entranceFee","nameLocation":"230:13:1","nodeType":"VariableDeclaration","scope":139,"src":"204:39:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65,"name":"uint256","nodeType":"ElementaryTypeName","src":"204:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":69,"mutability":"mutable","name":"s_players","nameLocation":"275:9:1","nodeType":"VariableDeclaration","scope":139,"src":"249:35:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[]"},"typeName":{"baseType":{"id":67,"name":"address","nodeType":"ElementaryTypeName","src":"249:15:1","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":68,"nodeType":"ArrayTypeName","src":"249:17:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"private"},{"anonymous":false,"id":73,"name":"RaffelEnter","nameLocation":"312:11:1","nodeType":"EventDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"indexed":true,"mutability":"mutable","name":"player","nameLocation":"340:6:1","nodeType":"VariableDeclaration","scope":73,"src":"324:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"324:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"323:24:1"},"src":"306:42:1"},{"body":{"id":87,"nodeType":"Block","src":"448:44:1","statements":[{"expression":{"id":85,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":83,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":66,"src":"458:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":84,"name":"entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"474:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"458:27:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":86,"nodeType":"ExpressionStatement","src":"458:27:1"}]},"id":88,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":80,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":75,"src":"431:16:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":81,"kind":"baseConstructorSpecifier","modifierName":{"id":79,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":57,"src":"413:17:1"},"nodeType":"ModifierInvocation","src":"413:35:1"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":78,"nodeType":"ParameterList","parameters":[{"constant":false,"id":75,"mutability":"mutable","name":"vrfCoordinatorV2","nameLocation":"375:16:1","nodeType":"VariableDeclaration","scope":88,"src":"367:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":74,"name":"address","nodeType":"ElementaryTypeName","src":"367:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":77,"mutability":"mutable","name":"entranceFee","nameLocation":"400:11:1","nodeType":"VariableDeclaration","scope":88,"src":"392:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":76,"name":"uint256","nodeType":"ElementaryTypeName","src":"392:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"366:46:1"},"returnParameters":{"id":82,"nodeType":"ParameterList","parameters":[],"src":"448:0:1"},"scope":139,"src":"354:138:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":115,"nodeType":"Block","src":"536:189:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":94,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":91,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"549:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":92,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"549:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":93,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":66,"src":"561:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"549:25:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":99,"nodeType":"IfStatement","src":"546:90:1","trueBody":{"id":98,"nodeType":"Block","src":"575:61:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":95,"name":"Ruffle__NotEnoughETHEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62,"src":"596:27:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"596:29:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":97,"nodeType":"RevertStatement","src":"589:36:1"}]}},{"expression":{"arguments":[{"arguments":[{"expression":{"id":105,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"668:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"668:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":104,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"660:8:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":103,"name":"address","nodeType":"ElementaryTypeName","src":"660:8:1","stateMutability":"payable","typeDescriptions":{}}},"id":107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"660:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"id":100,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69,"src":"645:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"645:14:1","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_payable_$dyn_storage_ptr_$_t_address_payable_$returns$__$bound_to$_t_array$_t_address_payable_$dyn_storage_ptr_$","typeString":"function (address payable[] storage pointer,address payable)"}},"id":108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"645:35:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":109,"nodeType":"ExpressionStatement","src":"645:35:1"},{"eventCall":{"arguments":[{"expression":{"id":111,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"707:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"707:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":110,"name":"RaffelEnter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"695:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"695:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":114,"nodeType":"EmitStatement","src":"690:28:1"}]},"functionSelector":"2cfcc539","id":116,"implemented":true,"kind":"function","modifiers":[],"name":"enterRaffle","nameLocation":"507:11:1","nodeType":"FunctionDefinition","parameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"518:2:1"},"returnParameters":{"id":90,"nodeType":"ParameterList","parameters":[],"src":"536:0:1"},"scope":139,"src":"498:227:1","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":119,"nodeType":"Block","src":"771:253:1","statements":[]},"functionSelector":"522a1f0b","id":120,"implemented":true,"kind":"function","modifiers":[],"name":"requestRandomWinner","nameLocation":"740:19:1","nodeType":"FunctionDefinition","parameters":{"id":117,"nodeType":"ParameterList","parameters":[],"src":"759:2:1"},"returnParameters":{"id":118,"nodeType":"ParameterList","parameters":[],"src":"771:0:1"},"scope":139,"src":"731:293:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[30],"body":{"id":129,"nodeType":"Block","src":"1126:2:1","statements":[]},"id":130,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"1039:18:1","nodeType":"FunctionDefinition","overrides":{"id":127,"nodeType":"OverrideSpecifier","overrides":[],"src":"1117:8:1"},"parameters":{"id":126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":122,"mutability":"mutable","name":"requestId","nameLocation":"1066:9:1","nodeType":"VariableDeclaration","scope":130,"src":"1058:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":121,"name":"uint256","nodeType":"ElementaryTypeName","src":"1058:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":125,"mutability":"mutable","name":"randomWords","nameLocation":"1095:11:1","nodeType":"VariableDeclaration","scope":130,"src":"1078:28:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":123,"name":"uint256","nodeType":"ElementaryTypeName","src":"1078:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":124,"nodeType":"ArrayTypeName","src":"1078:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1057:50:1"},"returnParameters":{"id":128,"nodeType":"ParameterList","parameters":[],"src":"1126:0:1"},"scope":139,"src":"1030:98:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":137,"nodeType":"Block","src":"1189:37:1","statements":[{"expression":{"id":135,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":66,"src":"1206:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":134,"id":136,"nodeType":"Return","src":"1199:20:1"}]},"functionSelector":"09bc33a7","id":138,"implemented":true,"kind":"function","modifiers":[],"name":"getEntranceFee","nameLocation":"1142:14:1","nodeType":"FunctionDefinition","parameters":{"id":131,"nodeType":"ParameterList","parameters":[],"src":"1156:2:1"},"returnParameters":{"id":134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":133,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":138,"src":"1180:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":132,"name":"uint256","nodeType":"ElementaryTypeName","src":"1180:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1179:9:1"},"scope":139,"src":"1133:93:1","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":140,"src":"162:1066:1","usedErrors":[8,62]}],"src":"32:1766:1"},"id":1}},"contracts":{"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"VRFConsumerBaseV2":{"abi":[{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).","kind":"dev","methods":{"constructor":{"params":{"_vrfCoordinator":"address of VRFCoordinator contract"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":\"VRFConsumerBaseV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************","version":1}}},"contracts/Raffle.sol":{"Ruffle":{"abi":[{"inputs":[{"internalType":"address","name":"vrfCoordinatorV2","type":"address"},{"internalType":"uint256","name":"entranceFee","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[],"name":"Ruffle__NotEnoughETHEntered","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"player","type":"address"}],"name":"RaffelEnter","type":"event"},{"inputs":[],"name":"enterRaffle","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getEntranceFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"requestRandomWinner","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_21":{"entryPoint":null,"id":21,"parameterSlots":1,"returnSlots":0},"@_88":{"entryPoint":null,"id":88,"parameterSlots":2,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":122,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":143,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256_fromMemory":{"entryPoint":164,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":228,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":246,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":278,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":288,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":293,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":316,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1715:2","statements":[{"body":{"nodeType":"YulBlock","src":"70:80:2","statements":[{"nodeType":"YulAssignment","src":"80:22:2","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"89:5:2"},"nodeType":"YulFunctionCall","src":"89:13:2"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"80:5:2"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"138:5:2"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"111:26:2"},"nodeType":"YulFunctionCall","src":"111:33:2"},"nodeType":"YulExpressionStatement","src":"111:33:2"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"48:6:2","type":""},{"name":"end","nodeType":"YulTypedName","src":"56:3:2","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:2","type":""}],"src":"7:143:2"},{"body":{"nodeType":"YulBlock","src":"219:80:2","statements":[{"nodeType":"YulAssignment","src":"229:22:2","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"244:6:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"238:5:2"},"nodeType":"YulFunctionCall","src":"238:13:2"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"229:5:2"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"287:5:2"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"260:26:2"},"nodeType":"YulFunctionCall","src":"260:33:2"},"nodeType":"YulExpressionStatement","src":"260:33:2"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"197:6:2","type":""},{"name":"end","nodeType":"YulTypedName","src":"205:3:2","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"213:5:2","type":""}],"src":"156:143:2"},{"body":{"nodeType":"YulBlock","src":"399:413:2","statements":[{"body":{"nodeType":"YulBlock","src":"445:83:2","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"447:77:2"},"nodeType":"YulFunctionCall","src":"447:79:2"},"nodeType":"YulExpressionStatement","src":"447:79:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"420:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"429:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"416:3:2"},"nodeType":"YulFunctionCall","src":"416:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"441:2:2","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"412:3:2"},"nodeType":"YulFunctionCall","src":"412:32:2"},"nodeType":"YulIf","src":"409:119:2"},{"nodeType":"YulBlock","src":"538:128:2","statements":[{"nodeType":"YulVariableDeclaration","src":"553:15:2","value":{"kind":"number","nodeType":"YulLiteral","src":"567:1:2","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"557:6:2","type":""}]},{"nodeType":"YulAssignment","src":"582:74:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"628:9:2"},{"name":"offset","nodeType":"YulIdentifier","src":"639:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"624:3:2"},"nodeType":"YulFunctionCall","src":"624:22:2"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"648:7:2"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"592:31:2"},"nodeType":"YulFunctionCall","src":"592:64:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"582:6:2"}]}]},{"nodeType":"YulBlock","src":"676:129:2","statements":[{"nodeType":"YulVariableDeclaration","src":"691:16:2","value":{"kind":"number","nodeType":"YulLiteral","src":"705:2:2","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"695:6:2","type":""}]},{"nodeType":"YulAssignment","src":"721:74:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"767:9:2"},{"name":"offset","nodeType":"YulIdentifier","src":"778:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"763:3:2"},"nodeType":"YulFunctionCall","src":"763:22:2"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"787:7:2"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"731:31:2"},"nodeType":"YulFunctionCall","src":"731:64:2"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"721:6:2"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"361:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"372:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"384:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"392:6:2","type":""}],"src":"305:507:2"},{"body":{"nodeType":"YulBlock","src":"858:35:2","statements":[{"nodeType":"YulAssignment","src":"868:19:2","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"884:2:2","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"878:5:2"},"nodeType":"YulFunctionCall","src":"878:9:2"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"868:6:2"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"851:6:2","type":""}],"src":"818:75:2"},{"body":{"nodeType":"YulBlock","src":"944:51:2","statements":[{"nodeType":"YulAssignment","src":"954:35:2","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"983:5:2"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"965:17:2"},"nodeType":"YulFunctionCall","src":"965:24:2"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"954:7:2"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"926:5:2","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"936:7:2","type":""}],"src":"899:96:2"},{"body":{"nodeType":"YulBlock","src":"1046:81:2","statements":[{"nodeType":"YulAssignment","src":"1056:65:2","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1071:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"1078:42:2","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1067:3:2"},"nodeType":"YulFunctionCall","src":"1067:54:2"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1056:7:2"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1028:5:2","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1038:7:2","type":""}],"src":"1001:126:2"},{"body":{"nodeType":"YulBlock","src":"1178:32:2","statements":[{"nodeType":"YulAssignment","src":"1188:16:2","value":{"name":"value","nodeType":"YulIdentifier","src":"1199:5:2"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1188:7:2"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1160:5:2","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1170:7:2","type":""}],"src":"1133:77:2"},{"body":{"nodeType":"YulBlock","src":"1305:28:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1322:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1325:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1315:6:2"},"nodeType":"YulFunctionCall","src":"1315:12:2"},"nodeType":"YulExpressionStatement","src":"1315:12:2"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"1216:117:2"},{"body":{"nodeType":"YulBlock","src":"1428:28:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1445:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1448:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1438:6:2"},"nodeType":"YulFunctionCall","src":"1438:12:2"},"nodeType":"YulExpressionStatement","src":"1438:12:2"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"1339:117:2"},{"body":{"nodeType":"YulBlock","src":"1505:79:2","statements":[{"body":{"nodeType":"YulBlock","src":"1562:16:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1571:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1574:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1564:6:2"},"nodeType":"YulFunctionCall","src":"1564:12:2"},"nodeType":"YulExpressionStatement","src":"1564:12:2"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1528:5:2"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1553:5:2"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1535:17:2"},"nodeType":"YulFunctionCall","src":"1535:24:2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1525:2:2"},"nodeType":"YulFunctionCall","src":"1525:35:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1518:6:2"},"nodeType":"YulFunctionCall","src":"1518:43:2"},"nodeType":"YulIf","src":"1515:63:2"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1498:5:2","type":""}],"src":"1462:122:2"},{"body":{"nodeType":"YulBlock","src":"1633:79:2","statements":[{"body":{"nodeType":"YulBlock","src":"1690:16:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1699:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1702:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1692:6:2"},"nodeType":"YulFunctionCall","src":"1692:12:2"},"nodeType":"YulExpressionStatement","src":"1692:12:2"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1656:5:2"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1681:5:2"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1663:17:2"},"nodeType":"YulFunctionCall","src":"1663:24:2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1653:2:2"},"nodeType":"YulFunctionCall","src":"1653:35:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1646:6:2"},"nodeType":"YulFunctionCall","src":"1646:43:2"},"nodeType":"YulIf","src":"1643:63:2"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1626:5:2","type":""}],"src":"1590:122:2"}]},"contents":"{\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":2,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60c060405234801561001057600080fd5b50604051610700380380610700833981810160405281019061003291906100a4565b818073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508060a081815250505050610153565b60008151905061008981610125565b92915050565b60008151905061009e8161013c565b92915050565b600080604083850312156100bb576100ba610120565b5b60006100c98582860161007a565b92505060206100da8582860161008f565b9150509250929050565b60006100ef826100f6565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b61012e816100e4565b811461013957600080fd5b50565b61014581610116565b811461015057600080fd5b50565b60805160601c60a0516105796101876000396000818160bd01526101a301526000818160e3015261013701526105796000f3fe60806040526004361061003f5760003560e01c806309bc33a7146100445780631fe543e31461006f5780632cfcc53914610098578063522a1f0b146100a2575b600080fd5b34801561005057600080fd5b506100596100b9565b60405161006691906103ff565b60405180910390f35b34801561007b57600080fd5b506100966004803603810190610091919061035c565b6100e1565b005b6100a06101a1565b005b3480156100ae57600080fd5b506100b76102a3565b005b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461019357337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161018a9291906103d6565b60405180910390fd5b61019d82826102a5565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156101fb576040517f7a98ce6f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f7576dfa1d70e42585bbb6b7a5765babb3ee338a059e83b51eab753df95c7625560405160405180910390a2565b565b5050565b60006102bc6102b78461043f565b61041a565b905080838252602082019050828560208602820111156102df576102de61050c565b5b60005b8581101561030f57816102f58882610347565b8452602084019350602083019250506001810190506102e2565b5050509392505050565b600082601f83011261032e5761032d610507565b5b813561033e8482602086016102a9565b91505092915050565b6000813590506103568161052c565b92915050565b6000806040838503121561037357610372610516565b5b600061038185828601610347565b925050602083013567ffffffffffffffff8111156103a2576103a1610511565b5b6103ae85828601610319565b9150509250929050565b6103c18161046b565b82525050565b6103d08161049d565b82525050565b60006040820190506103eb60008301856103b8565b6103f860208301846103b8565b9392505050565b600060208201905061041460008301846103c7565b92915050565b6000610424610435565b905061043082826104a7565b919050565b6000604051905090565b600067ffffffffffffffff82111561045a576104596104d8565b5b602082029050602081019050919050565b60006104768261047d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6104b08261051b565b810181811067ffffffffffffffff821117156104cf576104ce6104d8565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6105358161049d565b811461054057600080fd5b5056fea264697066735822122051576ba1e1cab1e24e245ca0989f4bfd3f8541f5cc8c8e93ef83d4318331113e64736f6c63430008070033","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x700 CODESIZE SUB DUP1 PUSH2 0x700 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0xA4 JUMP JUMPDEST DUP2 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP POP DUP1 PUSH1 0xA0 DUP2 DUP2 MSTORE POP POP POP POP PUSH2 0x153 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x89 DUP2 PUSH2 0x125 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x9E DUP2 PUSH2 0x13C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBB JUMPI PUSH2 0xBA PUSH2 0x120 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC9 DUP6 DUP3 DUP7 ADD PUSH2 0x7A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xDA DUP6 DUP3 DUP7 ADD PUSH2 0x8F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEF DUP3 PUSH2 0xF6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12E DUP2 PUSH2 0xE4 JUMP JUMPDEST DUP2 EQ PUSH2 0x139 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x145 DUP2 PUSH2 0x116 JUMP JUMPDEST DUP2 EQ PUSH2 0x150 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH2 0x579 PUSH2 0x187 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH1 0xBD ADD MSTORE PUSH2 0x1A3 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH1 0xE3 ADD MSTORE PUSH2 0x137 ADD MSTORE PUSH2 0x579 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9BC33A7 EQ PUSH2 0x44 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x6F JUMPI DUP1 PUSH4 0x2CFCC539 EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x522A1F0B EQ PUSH2 0xA2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x59 PUSH2 0xB9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0x3FF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x96 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x91 SWAP2 SWAP1 PUSH2 0x35C JUMP JUMPDEST PUSH2 0xE1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA0 PUSH2 0x1A1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB7 PUSH2 0x2A3 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x193 JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18A SWAP3 SWAP2 SWAP1 PUSH2 0x3D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x19D DUP3 DUP3 PUSH2 0x2A5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x1FB JUMPI PUSH1 0x40 MLOAD PUSH32 0x7A98CE6F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x7576DFA1D70E42585BBB6B7A5765BABB3EE338A059E83B51EAB753DF95C76255 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BC PUSH2 0x2B7 DUP5 PUSH2 0x43F JUMP JUMPDEST PUSH2 0x41A JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0x2DF JUMPI PUSH2 0x2DE PUSH2 0x50C JUMP JUMPDEST JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x30F JUMPI DUP2 PUSH2 0x2F5 DUP9 DUP3 PUSH2 0x347 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2E2 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x32E JUMPI PUSH2 0x32D PUSH2 0x507 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x33E DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2A9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x356 DUP2 PUSH2 0x52C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x373 JUMPI PUSH2 0x372 PUSH2 0x516 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x381 DUP6 DUP3 DUP7 ADD PUSH2 0x347 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3A2 JUMPI PUSH2 0x3A1 PUSH2 0x511 JUMP JUMPDEST JUMPDEST PUSH2 0x3AE DUP6 DUP3 DUP7 ADD PUSH2 0x319 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x3C1 DUP2 PUSH2 0x46B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x3D0 DUP2 PUSH2 0x49D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3EB PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3B8 JUMP JUMPDEST PUSH2 0x3F8 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3B8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x414 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3C7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x424 PUSH2 0x435 JUMP JUMPDEST SWAP1 POP PUSH2 0x430 DUP3 DUP3 PUSH2 0x4A7 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x45A JUMPI PUSH2 0x459 PUSH2 0x4D8 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x476 DUP3 PUSH2 0x47D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4B0 DUP3 PUSH2 0x51B JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x4CF JUMPI PUSH2 0x4CE PUSH2 0x4D8 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x535 DUP2 PUSH2 0x49D JUMP JUMPDEST DUP2 EQ PUSH2 0x540 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MLOAD JUMPI PUSH12 0xA1E1CAB1E24E245CA0989F4B REVERT EXTCODEHASH DUP6 COINBASE CREATE2 0xCC DUP13 DUP15 SWAP4 0xEF DUP4 0xD4 BALANCE DUP4 BALANCE GT RETURNDATACOPY PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"162:1066:1:-:0;;;354:138;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;431:16;5700:15:0;5683:32;;;;;;;;;;;;5640:80;474:11:1::1;458:27;;;;::::0;::::1;354:138:::0;;162:1066;;7:143:2;64:5;95:6;89:13;80:22;;111:33;138:5;111:33;:::i;:::-;7:143;;;;:::o;156:::-;213:5;244:6;238:13;229:22;;260:33;287:5;260:33;:::i;:::-;156:143;;;;:::o;305:507::-;384:6;392;441:2;429:9;420:7;416:23;412:32;409:119;;;447:79;;:::i;:::-;409:119;567:1;592:64;648:7;639:6;628:9;624:22;592:64;:::i;:::-;582:74;;538:128;705:2;731:64;787:7;778:6;767:9;763:22;731:64;:::i;:::-;721:74;;676:129;305:507;;;;;:::o;899:96::-;936:7;965:24;983:5;965:24;:::i;:::-;954:35;;899:96;;;:::o;1001:126::-;1038:7;1078:42;1071:5;1067:54;1056:65;;1001:126;;;:::o;1133:77::-;1170:7;1199:5;1188:16;;1133:77;;;:::o;1339:117::-;1448:1;1445;1438:12;1462:122;1535:24;1553:5;1535:24;:::i;:::-;1528:5;1525:35;1515:63;;1574:1;1571;1564:12;1515:63;1462:122;:::o;1590:::-;1663:24;1681:5;1663:24;:::i;:::-;1656:5;1653:35;1643:63;;1702:1;1699;1692:12;1643:63;1590:122;:::o;162:1066:1:-;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@enterRaffle_116":{"entryPoint":417,"id":116,"parameterSlots":0,"returnSlots":0},"@fulfillRandomWords_130":{"entryPoint":677,"id":130,"parameterSlots":2,"returnSlots":0},"@getEntranceFee_138":{"entryPoint":185,"id":138,"parameterSlots":0,"returnSlots":1},"@rawFulfillRandomWords_56":{"entryPoint":225,"id":56,"parameterSlots":2,"returnSlots":0},"@requestRandomWinner_120":{"entryPoint":675,"id":120,"parameterSlots":0,"returnSlots":0},"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":681,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":793,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":839,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":860,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":952,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":967,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":982,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":1023,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":1050,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":1077,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":1087,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_address":{"entryPoint":1131,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":1149,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":1181,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":1191,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x41":{"entryPoint":1240,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":1287,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":1292,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":1297,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":1302,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":1307,"id":null,"parameterSlots":1,"returnSlots":1},"validator_revert_t_uint256":{"entryPoint":1324,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4842:2","statements":[{"body":{"nodeType":"YulBlock","src":"126:620:2","statements":[{"nodeType":"YulAssignment","src":"136:90:2","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"218:6:2"}],"functionName":{"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"161:56:2"},"nodeType":"YulFunctionCall","src":"161:64:2"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"145:15:2"},"nodeType":"YulFunctionCall","src":"145:81:2"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"136:5:2"}]},{"nodeType":"YulVariableDeclaration","src":"235:16:2","value":{"name":"array","nodeType":"YulIdentifier","src":"246:5:2"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"239:3:2","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"268:5:2"},{"name":"length","nodeType":"YulIdentifier","src":"275:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"261:6:2"},"nodeType":"YulFunctionCall","src":"261:21:2"},"nodeType":"YulExpressionStatement","src":"261:21:2"},{"nodeType":"YulAssignment","src":"291:23:2","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"302:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"309:4:2","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"298:3:2"},"nodeType":"YulFunctionCall","src":"298:16:2"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"291:3:2"}]},{"nodeType":"YulVariableDeclaration","src":"324:17:2","value":{"name":"offset","nodeType":"YulIdentifier","src":"335:6:2"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"328:3:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"390:103:2","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"404:77:2"},"nodeType":"YulFunctionCall","src":"404:79:2"},"nodeType":"YulExpressionStatement","src":"404:79:2"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"360:3:2"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"369:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"377:4:2","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"365:3:2"},"nodeType":"YulFunctionCall","src":"365:17:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"356:3:2"},"nodeType":"YulFunctionCall","src":"356:27:2"},{"name":"end","nodeType":"YulIdentifier","src":"385:3:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"353:2:2"},"nodeType":"YulFunctionCall","src":"353:36:2"},"nodeType":"YulIf","src":"350:143:2"},{"body":{"nodeType":"YulBlock","src":"562:178:2","statements":[{"nodeType":"YulVariableDeclaration","src":"577:21:2","value":{"name":"src","nodeType":"YulIdentifier","src":"595:3:2"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"581:10:2","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"619:3:2"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"645:10:2"},{"name":"end","nodeType":"YulIdentifier","src":"657:3:2"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"624:20:2"},"nodeType":"YulFunctionCall","src":"624:37:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"612:6:2"},"nodeType":"YulFunctionCall","src":"612:50:2"},"nodeType":"YulExpressionStatement","src":"612:50:2"},{"nodeType":"YulAssignment","src":"675:21:2","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"686:3:2"},{"kind":"number","nodeType":"YulLiteral","src":"691:4:2","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"682:3:2"},"nodeType":"YulFunctionCall","src":"682:14:2"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"675:3:2"}]},{"nodeType":"YulAssignment","src":"709:21:2","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"720:3:2"},{"kind":"number","nodeType":"YulLiteral","src":"725:4:2","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"716:3:2"},"nodeType":"YulFunctionCall","src":"716:14:2"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"709:3:2"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"524:1:2"},{"name":"length","nodeType":"YulIdentifier","src":"527:6:2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"521:2:2"},"nodeType":"YulFunctionCall","src":"521:13:2"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"535:18:2","statements":[{"nodeType":"YulAssignment","src":"537:14:2","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"546:1:2"},{"kind":"number","nodeType":"YulLiteral","src":"549:1:2","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"542:3:2"},"nodeType":"YulFunctionCall","src":"542:9:2"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"537:1:2"}]}]},"pre":{"nodeType":"YulBlock","src":"506:14:2","statements":[{"nodeType":"YulVariableDeclaration","src":"508:10:2","value":{"kind":"number","nodeType":"YulLiteral","src":"517:1:2","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"512:1:2","type":""}]}]},"src":"502:238:2"}]},"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"96:6:2","type":""},{"name":"length","nodeType":"YulTypedName","src":"104:6:2","type":""},{"name":"end","nodeType":"YulTypedName","src":"112:3:2","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"120:5:2","type":""}],"src":"24:722:2"},{"body":{"nodeType":"YulBlock","src":"846:293:2","statements":[{"body":{"nodeType":"YulBlock","src":"895:83:2","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"897:77:2"},"nodeType":"YulFunctionCall","src":"897:79:2"},"nodeType":"YulExpressionStatement","src":"897:79:2"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"874:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"882:4:2","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"870:3:2"},"nodeType":"YulFunctionCall","src":"870:17:2"},{"name":"end","nodeType":"YulIdentifier","src":"889:3:2"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"866:3:2"},"nodeType":"YulFunctionCall","src":"866:27:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"859:6:2"},"nodeType":"YulFunctionCall","src":"859:35:2"},"nodeType":"YulIf","src":"856:122:2"},{"nodeType":"YulVariableDeclaration","src":"987:34:2","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1014:6:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1001:12:2"},"nodeType":"YulFunctionCall","src":"1001:20:2"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"991:6:2","type":""}]},{"nodeType":"YulAssignment","src":"1030:103:2","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1106:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"1114:4:2","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1102:3:2"},"nodeType":"YulFunctionCall","src":"1102:17:2"},{"name":"length","nodeType":"YulIdentifier","src":"1121:6:2"},{"name":"end","nodeType":"YulIdentifier","src":"1129:3:2"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"1039:62:2"},"nodeType":"YulFunctionCall","src":"1039:94:2"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1030:5:2"}]}]},"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"824:6:2","type":""},{"name":"end","nodeType":"YulTypedName","src":"832:3:2","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"840:5:2","type":""}],"src":"769:370:2"},{"body":{"nodeType":"YulBlock","src":"1197:87:2","statements":[{"nodeType":"YulAssignment","src":"1207:29:2","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1229:6:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1216:12:2"},"nodeType":"YulFunctionCall","src":"1216:20:2"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1207:5:2"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1272:5:2"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1245:26:2"},"nodeType":"YulFunctionCall","src":"1245:33:2"},"nodeType":"YulExpressionStatement","src":"1245:33:2"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1175:6:2","type":""},{"name":"end","nodeType":"YulTypedName","src":"1183:3:2","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1191:5:2","type":""}],"src":"1145:139:2"},{"body":{"nodeType":"YulBlock","src":"1398:576:2","statements":[{"body":{"nodeType":"YulBlock","src":"1444:83:2","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1446:77:2"},"nodeType":"YulFunctionCall","src":"1446:79:2"},"nodeType":"YulExpressionStatement","src":"1446:79:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1419:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"1428:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1415:3:2"},"nodeType":"YulFunctionCall","src":"1415:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"1440:2:2","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1411:3:2"},"nodeType":"YulFunctionCall","src":"1411:32:2"},"nodeType":"YulIf","src":"1408:119:2"},{"nodeType":"YulBlock","src":"1537:117:2","statements":[{"nodeType":"YulVariableDeclaration","src":"1552:15:2","value":{"kind":"number","nodeType":"YulLiteral","src":"1566:1:2","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1556:6:2","type":""}]},{"nodeType":"YulAssignment","src":"1581:63:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1616:9:2"},{"name":"offset","nodeType":"YulIdentifier","src":"1627:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1612:3:2"},"nodeType":"YulFunctionCall","src":"1612:22:2"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1636:7:2"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"1591:20:2"},"nodeType":"YulFunctionCall","src":"1591:53:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1581:6:2"}]}]},{"nodeType":"YulBlock","src":"1664:303:2","statements":[{"nodeType":"YulVariableDeclaration","src":"1679:46:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1710:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"1721:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1706:3:2"},"nodeType":"YulFunctionCall","src":"1706:18:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1693:12:2"},"nodeType":"YulFunctionCall","src":"1693:32:2"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1683:6:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"1772:83:2","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"1774:77:2"},"nodeType":"YulFunctionCall","src":"1774:79:2"},"nodeType":"YulExpressionStatement","src":"1774:79:2"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1744:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"1752:18:2","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1741:2:2"},"nodeType":"YulFunctionCall","src":"1741:30:2"},"nodeType":"YulIf","src":"1738:117:2"},{"nodeType":"YulAssignment","src":"1869:88:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1929:9:2"},{"name":"offset","nodeType":"YulIdentifier","src":"1940:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1925:3:2"},"nodeType":"YulFunctionCall","src":"1925:22:2"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1949:7:2"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"1879:45:2"},"nodeType":"YulFunctionCall","src":"1879:78:2"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1869:6:2"}]}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1360:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1371:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1383:6:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1391:6:2","type":""}],"src":"1290:684:2"},{"body":{"nodeType":"YulBlock","src":"2045:53:2","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2062:3:2"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2085:5:2"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"2067:17:2"},"nodeType":"YulFunctionCall","src":"2067:24:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2055:6:2"},"nodeType":"YulFunctionCall","src":"2055:37:2"},"nodeType":"YulExpressionStatement","src":"2055:37:2"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2033:5:2","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2040:3:2","type":""}],"src":"1980:118:2"},{"body":{"nodeType":"YulBlock","src":"2169:53:2","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2186:3:2"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2209:5:2"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2191:17:2"},"nodeType":"YulFunctionCall","src":"2191:24:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2179:6:2"},"nodeType":"YulFunctionCall","src":"2179:37:2"},"nodeType":"YulExpressionStatement","src":"2179:37:2"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2157:5:2","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2164:3:2","type":""}],"src":"2104:118:2"},{"body":{"nodeType":"YulBlock","src":"2354:206:2","statements":[{"nodeType":"YulAssignment","src":"2364:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2376:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2387:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2372:3:2"},"nodeType":"YulFunctionCall","src":"2372:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2364:4:2"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2444:6:2"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2457:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2468:1:2","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2453:3:2"},"nodeType":"YulFunctionCall","src":"2453:17:2"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"2400:43:2"},"nodeType":"YulFunctionCall","src":"2400:71:2"},"nodeType":"YulExpressionStatement","src":"2400:71:2"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2525:6:2"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2538:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2549:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2534:3:2"},"nodeType":"YulFunctionCall","src":"2534:18:2"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"2481:43:2"},"nodeType":"YulFunctionCall","src":"2481:72:2"},"nodeType":"YulExpressionStatement","src":"2481:72:2"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2318:9:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2330:6:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2338:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2349:4:2","type":""}],"src":"2228:332:2"},{"body":{"nodeType":"YulBlock","src":"2664:124:2","statements":[{"nodeType":"YulAssignment","src":"2674:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2686:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2697:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2682:3:2"},"nodeType":"YulFunctionCall","src":"2682:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2674:4:2"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2754:6:2"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2767:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2778:1:2","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2763:3:2"},"nodeType":"YulFunctionCall","src":"2763:17:2"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"2710:43:2"},"nodeType":"YulFunctionCall","src":"2710:71:2"},"nodeType":"YulExpressionStatement","src":"2710:71:2"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2636:9:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2648:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2659:4:2","type":""}],"src":"2566:222:2"},{"body":{"nodeType":"YulBlock","src":"2835:88:2","statements":[{"nodeType":"YulAssignment","src":"2845:30:2","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"2855:18:2"},"nodeType":"YulFunctionCall","src":"2855:20:2"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2845:6:2"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2904:6:2"},{"name":"size","nodeType":"YulIdentifier","src":"2912:4:2"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"2884:19:2"},"nodeType":"YulFunctionCall","src":"2884:33:2"},"nodeType":"YulExpressionStatement","src":"2884:33:2"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"2819:4:2","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2828:6:2","type":""}],"src":"2794:129:2"},{"body":{"nodeType":"YulBlock","src":"2969:35:2","statements":[{"nodeType":"YulAssignment","src":"2979:19:2","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2995:2:2","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2989:5:2"},"nodeType":"YulFunctionCall","src":"2989:9:2"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2979:6:2"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2962:6:2","type":""}],"src":"2929:75:2"},{"body":{"nodeType":"YulBlock","src":"3092:229:2","statements":[{"body":{"nodeType":"YulBlock","src":"3197:22:2","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3199:16:2"},"nodeType":"YulFunctionCall","src":"3199:18:2"},"nodeType":"YulExpressionStatement","src":"3199:18:2"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3169:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"3177:18:2","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3166:2:2"},"nodeType":"YulFunctionCall","src":"3166:30:2"},"nodeType":"YulIf","src":"3163:56:2"},{"nodeType":"YulAssignment","src":"3229:25:2","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3241:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"3249:4:2","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3237:3:2"},"nodeType":"YulFunctionCall","src":"3237:17:2"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"3229:4:2"}]},{"nodeType":"YulAssignment","src":"3291:23:2","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"3303:4:2"},{"kind":"number","nodeType":"YulLiteral","src":"3309:4:2","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3299:3:2"},"nodeType":"YulFunctionCall","src":"3299:15:2"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"3291:4:2"}]}]},"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"3076:6:2","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"3087:4:2","type":""}],"src":"3010:311:2"},{"body":{"nodeType":"YulBlock","src":"3372:51:2","statements":[{"nodeType":"YulAssignment","src":"3382:35:2","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3411:5:2"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3393:17:2"},"nodeType":"YulFunctionCall","src":"3393:24:2"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3382:7:2"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3354:5:2","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3364:7:2","type":""}],"src":"3327:96:2"},{"body":{"nodeType":"YulBlock","src":"3474:81:2","statements":[{"nodeType":"YulAssignment","src":"3484:65:2","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3499:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"3506:42:2","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3495:3:2"},"nodeType":"YulFunctionCall","src":"3495:54:2"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3484:7:2"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3456:5:2","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3466:7:2","type":""}],"src":"3429:126:2"},{"body":{"nodeType":"YulBlock","src":"3606:32:2","statements":[{"nodeType":"YulAssignment","src":"3616:16:2","value":{"name":"value","nodeType":"YulIdentifier","src":"3627:5:2"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3616:7:2"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3588:5:2","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3598:7:2","type":""}],"src":"3561:77:2"},{"body":{"nodeType":"YulBlock","src":"3687:238:2","statements":[{"nodeType":"YulVariableDeclaration","src":"3697:58:2","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3719:6:2"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"3749:4:2"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"3727:21:2"},"nodeType":"YulFunctionCall","src":"3727:27:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3715:3:2"},"nodeType":"YulFunctionCall","src":"3715:40:2"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"3701:10:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"3866:22:2","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3868:16:2"},"nodeType":"YulFunctionCall","src":"3868:18:2"},"nodeType":"YulExpressionStatement","src":"3868:18:2"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3809:10:2"},{"kind":"number","nodeType":"YulLiteral","src":"3821:18:2","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3806:2:2"},"nodeType":"YulFunctionCall","src":"3806:34:2"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3845:10:2"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3857:6:2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3842:2:2"},"nodeType":"YulFunctionCall","src":"3842:22:2"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3803:2:2"},"nodeType":"YulFunctionCall","src":"3803:62:2"},"nodeType":"YulIf","src":"3800:88:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3904:2:2","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3908:10:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3897:6:2"},"nodeType":"YulFunctionCall","src":"3897:22:2"},"nodeType":"YulExpressionStatement","src":"3897:22:2"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"3673:6:2","type":""},{"name":"size","nodeType":"YulTypedName","src":"3681:4:2","type":""}],"src":"3644:281:2"},{"body":{"nodeType":"YulBlock","src":"3959:152:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3976:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3979:77:2","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3969:6:2"},"nodeType":"YulFunctionCall","src":"3969:88:2"},"nodeType":"YulExpressionStatement","src":"3969:88:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4073:1:2","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4076:4:2","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4066:6:2"},"nodeType":"YulFunctionCall","src":"4066:15:2"},"nodeType":"YulExpressionStatement","src":"4066:15:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4097:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4100:4:2","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4090:6:2"},"nodeType":"YulFunctionCall","src":"4090:15:2"},"nodeType":"YulExpressionStatement","src":"4090:15:2"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3931:180:2"},{"body":{"nodeType":"YulBlock","src":"4206:28:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4223:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4226:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4216:6:2"},"nodeType":"YulFunctionCall","src":"4216:12:2"},"nodeType":"YulExpressionStatement","src":"4216:12:2"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"4117:117:2"},{"body":{"nodeType":"YulBlock","src":"4329:28:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4346:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4349:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4339:6:2"},"nodeType":"YulFunctionCall","src":"4339:12:2"},"nodeType":"YulExpressionStatement","src":"4339:12:2"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"4240:117:2"},{"body":{"nodeType":"YulBlock","src":"4452:28:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4469:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4472:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4462:6:2"},"nodeType":"YulFunctionCall","src":"4462:12:2"},"nodeType":"YulExpressionStatement","src":"4462:12:2"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"4363:117:2"},{"body":{"nodeType":"YulBlock","src":"4575:28:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4592:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4595:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4585:6:2"},"nodeType":"YulFunctionCall","src":"4585:12:2"},"nodeType":"YulExpressionStatement","src":"4585:12:2"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"4486:117:2"},{"body":{"nodeType":"YulBlock","src":"4657:54:2","statements":[{"nodeType":"YulAssignment","src":"4667:38:2","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4685:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"4692:2:2","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4681:3:2"},"nodeType":"YulFunctionCall","src":"4681:14:2"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4701:2:2","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4697:3:2"},"nodeType":"YulFunctionCall","src":"4697:7:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4677:3:2"},"nodeType":"YulFunctionCall","src":"4677:28:2"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"4667:6:2"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4640:5:2","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"4650:6:2","type":""}],"src":"4609:102:2"},{"body":{"nodeType":"YulBlock","src":"4760:79:2","statements":[{"body":{"nodeType":"YulBlock","src":"4817:16:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4826:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4829:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4819:6:2"},"nodeType":"YulFunctionCall","src":"4819:12:2"},"nodeType":"YulExpressionStatement","src":"4819:12:2"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4783:5:2"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4808:5:2"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4790:17:2"},"nodeType":"YulFunctionCall","src":"4790:24:2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4780:2:2"},"nodeType":"YulFunctionCall","src":"4780:35:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4773:6:2"},"nodeType":"YulFunctionCall","src":"4773:43:2"},"nodeType":"YulIf","src":"4770:63:2"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4753:5:2","type":""}],"src":"4717:122:2"}]},"contents":"{\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let src := offset\n        if gt(add(src, mul(length, 0x20)), end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256(elementPos, end))\n            dst := add(dst, 0x20)\n            src := add(src, 0x20)\n        }\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":2,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"10":[{"length":32,"start":227},{"length":32,"start":311}],"66":[{"length":32,"start":189},{"length":32,"start":419}]},"linkReferences":{},"object":"60806040526004361061003f5760003560e01c806309bc33a7146100445780631fe543e31461006f5780632cfcc53914610098578063522a1f0b146100a2575b600080fd5b34801561005057600080fd5b506100596100b9565b60405161006691906103ff565b60405180910390f35b34801561007b57600080fd5b506100966004803603810190610091919061035c565b6100e1565b005b6100a06101a1565b005b3480156100ae57600080fd5b506100b76102a3565b005b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461019357337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161018a9291906103d6565b60405180910390fd5b61019d82826102a5565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156101fb576040517f7a98ce6f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f7576dfa1d70e42585bbb6b7a5765babb3ee338a059e83b51eab753df95c7625560405160405180910390a2565b565b5050565b60006102bc6102b78461043f565b61041a565b905080838252602082019050828560208602820111156102df576102de61050c565b5b60005b8581101561030f57816102f58882610347565b8452602084019350602083019250506001810190506102e2565b5050509392505050565b600082601f83011261032e5761032d610507565b5b813561033e8482602086016102a9565b91505092915050565b6000813590506103568161052c565b92915050565b6000806040838503121561037357610372610516565b5b600061038185828601610347565b925050602083013567ffffffffffffffff8111156103a2576103a1610511565b5b6103ae85828601610319565b9150509250929050565b6103c18161046b565b82525050565b6103d08161049d565b82525050565b60006040820190506103eb60008301856103b8565b6103f860208301846103b8565b9392505050565b600060208201905061041460008301846103c7565b92915050565b6000610424610435565b905061043082826104a7565b919050565b6000604051905090565b600067ffffffffffffffff82111561045a576104596104d8565b5b602082029050602081019050919050565b60006104768261047d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6104b08261051b565b810181811067ffffffffffffffff821117156104cf576104ce6104d8565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6105358161049d565b811461054057600080fd5b5056fea264697066735822122051576ba1e1cab1e24e245ca0989f4bfd3f8541f5cc8c8e93ef83d4318331113e64736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9BC33A7 EQ PUSH2 0x44 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x6F JUMPI DUP1 PUSH4 0x2CFCC539 EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x522A1F0B EQ PUSH2 0xA2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x59 PUSH2 0xB9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66 SWAP2 SWAP1 PUSH2 0x3FF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x96 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x91 SWAP2 SWAP1 PUSH2 0x35C JUMP JUMPDEST PUSH2 0xE1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA0 PUSH2 0x1A1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB7 PUSH2 0x2A3 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x193 JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18A SWAP3 SWAP2 SWAP1 PUSH2 0x3D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x19D DUP3 DUP3 PUSH2 0x2A5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x1FB JUMPI PUSH1 0x40 MLOAD PUSH32 0x7A98CE6F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x7576DFA1D70E42585BBB6B7A5765BABB3EE338A059E83B51EAB753DF95C76255 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BC PUSH2 0x2B7 DUP5 PUSH2 0x43F JUMP JUMPDEST PUSH2 0x41A JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0x2DF JUMPI PUSH2 0x2DE PUSH2 0x50C JUMP JUMPDEST JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x30F JUMPI DUP2 PUSH2 0x2F5 DUP9 DUP3 PUSH2 0x347 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2E2 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x32E JUMPI PUSH2 0x32D PUSH2 0x507 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x33E DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2A9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x356 DUP2 PUSH2 0x52C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x373 JUMPI PUSH2 0x372 PUSH2 0x516 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x381 DUP6 DUP3 DUP7 ADD PUSH2 0x347 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3A2 JUMPI PUSH2 0x3A1 PUSH2 0x511 JUMP JUMPDEST JUMPDEST PUSH2 0x3AE DUP6 DUP3 DUP7 ADD PUSH2 0x319 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x3C1 DUP2 PUSH2 0x46B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x3D0 DUP2 PUSH2 0x49D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3EB PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3B8 JUMP JUMPDEST PUSH2 0x3F8 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3B8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x414 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3C7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x424 PUSH2 0x435 JUMP JUMPDEST SWAP1 POP PUSH2 0x430 DUP3 DUP3 PUSH2 0x4A7 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x45A JUMPI PUSH2 0x459 PUSH2 0x4D8 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x476 DUP3 PUSH2 0x47D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4B0 DUP3 PUSH2 0x51B JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x4CF JUMPI PUSH2 0x4CE PUSH2 0x4D8 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x535 DUP2 PUSH2 0x49D JUMP JUMPDEST DUP2 EQ PUSH2 0x540 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MLOAD JUMPI PUSH12 0xA1E1CAB1E24E245CA0989F4B REVERT EXTCODEHASH DUP6 COINBASE CREATE2 0xCC DUP13 DUP15 SWAP4 0xEF DUP4 0xD4 BALANCE DUP4 BALANCE GT RETURNDATACOPY PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"162:1066:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1133:93;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6794:256:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;498:227:1;;;:::i;:::-;;731:293;;;;;;;;;;;;;:::i;:::-;;1133:93;1180:7;1206:13;1199:20;;1133:93;:::o;6794:256:0:-;6907:14;6893:28;;:10;:28;;;6889:109;;6964:10;6976:14;6938:53;;;;;;;;;;;;:::i;:::-;;;;;;;;6889:109;7003:42;7022:9;7033:11;7003:18;:42::i;:::-;6794:256;;:::o;498:227:1:-;561:13;549:9;:25;546:90;;;596:29;;;;;;;;;;;;;;546:90;645:9;668:10;645:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;707:10;695:23;;;;;;;;;;;;498:227::o;731:293::-;:::o;1030:98::-;;;:::o;24:722:2:-;120:5;145:81;161:64;218:6;161:64;:::i;:::-;145:81;:::i;:::-;136:90;;246:5;275:6;268:5;261:21;309:4;302:5;298:16;291:23;;335:6;385:3;377:4;369:6;365:17;360:3;356:27;353:36;350:143;;;404:79;;:::i;:::-;350:143;517:1;502:238;527:6;524:1;521:13;502:238;;;595:3;624:37;657:3;645:10;624:37;:::i;:::-;619:3;612:50;691:4;686:3;682:14;675:21;;725:4;720:3;716:14;709:21;;562:178;549:1;546;542:9;537:14;;502:238;;;506:14;126:620;;24:722;;;;;:::o;769:370::-;840:5;889:3;882:4;874:6;870:17;866:27;856:122;;897:79;;:::i;:::-;856:122;1014:6;1001:20;1039:94;1129:3;1121:6;1114:4;1106:6;1102:17;1039:94;:::i;:::-;1030:103;;846:293;769:370;;;;:::o;1145:139::-;1191:5;1229:6;1216:20;1207:29;;1245:33;1272:5;1245:33;:::i;:::-;1145:139;;;;:::o;1290:684::-;1383:6;1391;1440:2;1428:9;1419:7;1415:23;1411:32;1408:119;;;1446:79;;:::i;:::-;1408:119;1566:1;1591:53;1636:7;1627:6;1616:9;1612:22;1591:53;:::i;:::-;1581:63;;1537:117;1721:2;1710:9;1706:18;1693:32;1752:18;1744:6;1741:30;1738:117;;;1774:79;;:::i;:::-;1738:117;1879:78;1949:7;1940:6;1929:9;1925:22;1879:78;:::i;:::-;1869:88;;1664:303;1290:684;;;;;:::o;1980:118::-;2067:24;2085:5;2067:24;:::i;:::-;2062:3;2055:37;1980:118;;:::o;2104:::-;2191:24;2209:5;2191:24;:::i;:::-;2186:3;2179:37;2104:118;;:::o;2228:332::-;2349:4;2387:2;2376:9;2372:18;2364:26;;2400:71;2468:1;2457:9;2453:17;2444:6;2400:71;:::i;:::-;2481:72;2549:2;2538:9;2534:18;2525:6;2481:72;:::i;:::-;2228:332;;;;;:::o;2566:222::-;2659:4;2697:2;2686:9;2682:18;2674:26;;2710:71;2778:1;2767:9;2763:17;2754:6;2710:71;:::i;:::-;2566:222;;;;:::o;2794:129::-;2828:6;2855:20;;:::i;:::-;2845:30;;2884:33;2912:4;2904:6;2884:33;:::i;:::-;2794:129;;;:::o;2929:75::-;2962:6;2995:2;2989:9;2979:19;;2929:75;:::o;3010:311::-;3087:4;3177:18;3169:6;3166:30;3163:56;;;3199:18;;:::i;:::-;3163:56;3249:4;3241:6;3237:17;3229:25;;3309:4;3303;3299:15;3291:23;;3010:311;;;:::o;3327:96::-;3364:7;3393:24;3411:5;3393:24;:::i;:::-;3382:35;;3327:96;;;:::o;3429:126::-;3466:7;3506:42;3499:5;3495:54;3484:65;;3429:126;;;:::o;3561:77::-;3598:7;3627:5;3616:16;;3561:77;;;:::o;3644:281::-;3727:27;3749:4;3727:27;:::i;:::-;3719:6;3715:40;3857:6;3845:10;3842:22;3821:18;3809:10;3806:34;3803:62;3800:88;;;3868:18;;:::i;:::-;3800:88;3908:10;3904:2;3897:22;3687:238;3644:281;;:::o;3931:180::-;3979:77;3976:1;3969:88;4076:4;4073:1;4066:15;4100:4;4097:1;4090:15;4117:117;4226:1;4223;4216:12;4240:117;4349:1;4346;4339:12;4363:117;4472:1;4469;4462:12;4486:117;4595:1;4592;4585:12;4609:102;4650:6;4701:2;4697:7;4692:2;4685:5;4681:14;4677:28;4667:38;;4609:102;;;:::o;4717:122::-;4790:24;4808:5;4790:24;:::i;:::-;4783:5;4780:35;4770:63;;4829:1;4826;4819:12;4770:63;4717:122;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"280200","executionCost":"infinite","totalCost":"infinite"},"external":{"enterRaffle()":"infinite","getEntranceFee()":"infinite","rawFulfillRandomWords(uint256,uint256[])":"infinite","requestRandomWinner()":"188"},"internal":{"fulfillRandomWords(uint256,uint256[] memory)":"13"}},"methodIdentifiers":{"enterRaffle()":"2cfcc539","getEntranceFee()":"09bc33a7","rawFulfillRandomWords(uint256,uint256[])":"1fe543e3","requestRandomWinner()":"522a1f0b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ruffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffelEnter\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Ruffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\n\\nerror Ruffle__NotEnoughETHEntered();\\n\\ncontract Ruffle is VRFConsumerBaseV2{\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n\\n    // Events \\n    event RaffelEnter(address indexed player);\\n\\n    constructor (address vrfCoordinatorV2,uint256 entranceFee) VRFConsumerBaseV2(vrfCoordinatorV2){\\n        i_entranceFee = entranceFee;\\n    }\\n\\n    function enterRaffle() public payable {\\n        if(msg.value < i_entranceFee){\\n            revert Ruffle__NotEnoughETHEntered();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit RaffelEnter(msg.sender);\\n    }\\n\\n    function requestRandomWinner() external {  \\n        //req random num\\n        // once we get it do something with it \\n        // we will do 2 transaction process coze if we did it with in 1 tracsaction then some one can try to do the same and can manipulate the raffle and win...\\n        \\n    }\\n\\n    function fulfillRandomWords(uint256 requestId,  uint256[] memory randomWords) internal override {}\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n}\\n\\n//contract \\n\\n//state variables\\n\\n//declar a private and immutable var entranceFee which will be immutable var so use i_\\n//make address type payable[] private variable which will be storage variable\\n\\n//constractor which will take entranceFee as argument and initealize the main entranceFee var\\n\\n//declare ruffle function which will be public and payable where \\n// 1st check enough entrance fee is entered or not if not then throw revert Raffle__NotEnoughETHEntered() and declare it out side the contract\\n\\n//declare function getentrancefee public view returns entrancefee\",\"keccak256\":\"0x86331b37c135c0a01efdab69402b7f09fb5f66dd01c1b34688b97a1d745409f1\"}},\"version\":1}","storageLayout":{"storage":[{"astId":69,"contract":"contracts/Raffle.sol:Ruffle","label":"s_players","offset":0,"slot":"0","type":"t_array(t_address_payable)dyn_storage"}],"types":{"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_array(t_address_payable)dyn_storage":{"base":"t_address_payable","encoding":"dynamic_array","label":"address payable[]","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}